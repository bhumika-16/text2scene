pipeline {
    agent any
    environment {
        DOCKER_IMAGE_TAG = "${currentBuild.number}"
        BACKEND_IMAGE = "bhumika-t2i-backend:${DOCKER_IMAGE_TAG}"
        FRONTEND_IMAGE = "bhumika-t2i-frontend:${DOCKER_IMAGE_TAG}"
    }
    stages {
        stage("Code Fetch") {
            steps {
                git url: "https://github.com/bhumika-16/text2scene.git" ,branch:"main"
            }
        }
        stage("Build Backend Docker Image") {
            steps {
                bat "docker build -t bhumika-t2i-backend:${DOCKER_IMAGE_TAG} src/backend"
            }
        }
        stage("Build Frontend Docker Image") {
            steps {
                bat "docker build -t bhumika-t2i-frontend:${DOCKER_IMAGE_TAG} src/frontend"
            }
        }
        stage("Push Backend Docker Images") {
            steps {
                withCredentials([usernamePassword(credentialsId:"DockerHubCred",passwordVariable:"dockerpassword",usernameVariable:"dockerusername")]){
                    bat "docker login -u ${env.dockerusername} -p ${env.dockerpassword}"
                    bat "docker tag bhumika-t2i-backend:${DOCKER_IMAGE_TAG} ${env.dockerusername}/bhumika-t2i-backend"
                    bat "docker push ${env.dockerusername}/bhumika-t2i-backend"
                }
            }
        }
        stage("Push Frontend Docker Images") {
            steps {
                withCredentials([usernamePassword(credentialsId:"DockerHubCred",passwordVariable:"dockerpassword",usernameVariable:"dockerusername")]){
                    bat "docker login -u ${env.dockerusername} -p ${env.dockerpassword}"
                    bat "docker tag bhumika-t2i-frontend:${DOCKER_IMAGE_TAG} ${env.dockerusername}/bhumika-t2i-frontend"
                    bat "docker push ${env.dockerusername}/bhumika-t2i-frontend"
                }
            }
        }
 stage("deploy") {
            steps {
        bat "kubectl auth can-i create deployments"
}
}
        stage("Deploy Kubernetes") {
            steps {
                withCredentials([usernamePassword(credentialsId: "DockerHubCred", passwordVariable: "dockerpassword", usernameVariable: "dockerusername")]) {
                    bat "kubectl apply -f manifests/deploy/mysql-deploy.yaml --validate=false"
                    bat "kubectl apply -f manifests/deploy/nginx-deploy.yaml --validate=false"
                    bat "kubectl apply -f manifests/deploy/backend-deploy.yaml --validate=false"
                    bat "kubectl apply -f manifests/deploy/frontend-deploy.yaml --validate=false"
                }
            }
        }
        stage("Set Ingress rules for Frontend and Backend") {
            steps {
                bat "sudo kubectl apply -f manifests/ingress/ingress-backend.yaml"
                bat "sudo kubectl apply -f manifests/ingress/ingress-frontend.yaml"
            }
        }
        stage("Deploy Kubernetes services") {
            steps {
                bat "sudo kubectl apply -f manifests/svc/backend-service.yaml"
                bat "sudo kubectl apply -f manifests/svc/frontend-service.yaml"
                bat "sudo kubectl apply -f manifests/svc/nginx-svc.yaml"
            }
        }
    }
    post {
        success {
            script {
                bat "sudo kubectl delete pod -l app=bhumika-backend --field-selector=status.phase==Running"
                bat "sudo kubectl delete pod -l app=bhumika-frontend --field-selector=status.phase==Running"
                bat "sudo kubectl delete pod -l app=bhumika-backend --field-selector=status.phase!=Running"
                bat "sudo kubectl delete pod -l app=bhumika-frontend --field-selector=status.phase!=Running"
                bat "docker image prune -f"
                bat "docker rmi ${BACKEND_IMAGE} ${FRONTEND_IMAGE}"
            }
        }
        failure {
            bat 'echo "Build failed"'
            bat "docker rmi ${BACKEND_IMAGE} ${FRONTEND_IMAGE}"
        }
    }
}
