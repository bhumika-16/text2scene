pipeline {
    agent any
    environment {
        KUBECONFIG = "fix/kubeconfig"
        DOCKER_IMAGE_TAG = "${currentBuild.number}"
        BACKEND_IMAGE = "bhumika-t2i-backend:${DOCKER_IMAGE_TAG}"
        FRONTEND_IMAGE = "bhumika-t2i-frontend:${DOCKER_IMAGE_TAG}"
    }
    stages {
        stage("Code Fetch") {
            steps {
                git url: "https://github.com/bhumika-16/text2scene.git", branch: "main"
            }
        }
       
        stage("Build Frontend Docker Image") {
            steps {
                bat "docker build -t bhumika-t2i-frontend:${DOCKER_IMAGE_TAG} src/frontend"
            }
        }
        stage("Testing Frontend application") {
            steps {
                bat "docker run --rm ${FRONTEND_IMAGE} npm run test:ci"
            }
        }

         stage("Build Backend Docker Image") {
            steps {
                bat "docker build -t bhumika-t2i-backend:${DOCKER_IMAGE_TAG} src/backend"
            }
        }
        stage("Testing Backend application") {
            steps {
                bat "docker run --rm ${BACKEND_IMAGE} pytest ." 
            }
        }
        stage("Push Backend Docker Images") {
            steps {
                withCredentials([usernamePassword(credentialsId:"DockerHubCred",passwordVariable:"dockerpassword",usernameVariable:"dockerusername")]){
                    bat "docker login -u ${env.dockerusername} -p ${env.dockerpassword}"
                    bat "docker tag bhumika-t2i-backend:${DOCKER_IMAGE_TAG} ${env.dockerusername}/bhumika-t2i-backend"
                    bat "docker push ${env.dockerusername}/bhumika-t2i-backend"
                }
            }
        }
        stage("Push Frontend Docker Images") {
            steps {
                withCredentials([usernamePassword(credentialsId:"DockerHubCred",passwordVariable:"dockerpassword",usernameVariable:"dockerusername")]){
                    bat "docker login -u ${env.dockerusername} -p ${env.dockerpassword}"
                    bat "docker tag bhumika-t2i-frontend:${DOCKER_IMAGE_TAG} ${env.dockerusername}/bhumika-t2i-frontend"
                    bat "docker push ${env.dockerusername}/bhumika-t2i-frontend"
                }
            }
        }
        stage("Deploy ELK") {
            steps {
                bat "kubectl apply -f manifests/deploy/fluentbit-deploy.yaml"               
                bat "kubectl apply -f manifests/deploy/logtash-deploy.yaml"
                bat "kubectl apply -f manifests/deploy/elasticsearch-deploy.yaml"
                bat "kubectl apply -f manifests/deploy/kibana-deploy.yaml"
                bat "kubectl apply -f manifests/svc/elasticsearch-svc.yaml"
                bat "kubectl apply -f manifests/svc/logtash-svc.yaml"
                bat "kubectl apply -f manifests/svc/kibana-svc.yaml"
            }
        }
        
        stage("Deploy Kubernetes") {
            steps {
                withCredentials([usernamePassword(credentialsId:"DockerHubCred",passwordVariable:"dockerpassword",usernameVariable:"dockerusername")]){
                    bat "kubectl apply -f manifests/deploy/mysql-deploy.yaml"
                    bat "kubectl apply -f manifests/deploy/nginx-deploy.yaml"
                    bat "kubectl apply -f manifests/deploy/backend-deploy.yaml"
                    bat "kubectl apply -f manifests/deploy/frontend-deploy.yaml"
                }
            }
        }
        stage("Set Ingress rules for Frontend and Backend") {
            steps {
                bat "kubectl apply -f manifests/ingress/ingress-backend.yaml"
                bat "kubectl apply -f manifests/ingress/ingress-frontend.yaml"
            }
        }
        stage("Deploy Kubernetes services") {
            steps {
                bat "kubectl apply -f manifests/svc/backend-service.yaml"
                bat "kubectl apply -f manifests/svc/frontend-service.yaml"
                bat "kubectl apply -f manifests/svc/nginx-svc.yaml"
            }
        }
         stage("Setting up autoscaling") {
            steps {
                script {
                    def hpaBackendExists = bat (
                        script: 'kubectl get hpa bhumika-backend-deployment',
                        returnStatus: true
                    ) == 0
                    if (!hpaBackendExists) {
                        bat "kubectl autoscale deployment bhumika-backend-deployment --cpu-percent=50 --min=1 --max=10"
                    } else {
                        echo "HPA bhumika-backend-deployment already exists"
                    }
                    def hpaFrontendExists = bat (
                        script: 'kubectl get hpa bhumika-frontend-deployment',
                        returnStatus: true
                    ) == 0
                    if (!hpaFrontendExists) {
                        bat "kubectl autoscale deployment bhumika-frontend-deployment --cpu-percent=50 --min=1 --max=10"
                    } else {
                        echo "HPA bhumika-frontend-deployment already exists"
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                bat "kubectl delete pod -l app=bhumika-backend --field-selector=status.phase==Running"
                bat "kubectl delete pod -l app=bhumika-frontend --field-selector=status.phase==Running"
                bat "kubectl delete pod -l app=bhumika-backend --field-selector=status.phase!=Running"
                bat "kubectl delete pod -l app=bhumika-frontend --field-selector=status.phase!=Running"
                bat "docker image prune -f"
                bat "docker rmi ${BACKEND_IMAGE} ${FRONTEND_IMAGE}"
            }
        }
        failure {
            bat 'echo "Build failed"'
            bat "docker rmi ${BACKEND_IMAGE} ${FRONTEND_IMAGE}"
        }
    }
}
